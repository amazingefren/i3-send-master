#!/usr/bin/env python3

from i3ipc.aio import Connection
import asyncio


# FUNC: swap_master()
# ARGS: (bar: i3ipc::Workspace, baz: i3ipc::Focused)
# RETURN: Command:str
# LOGIC: Biggest by total area in px (Width*Height)
#   NOTE: Conflicting masters will be decided by order
# FUTURE: Sending Trigger to => _NET_WM_STATE_DEMANDS_ATTENTION
#           to avoid overriding user preferences
async def swap_master(ws, focused):
    master = {
            "con_id": focused.ipc_data['id'] or 0,
            # "name": focused.name or "",
            "size": focused.rect.height * focused.rect.width or 0,
    }
    for con in ws:
        if con.name is not None and con.ipc_data['id'] is not master['con_id']:
            size = con.rect.height*con.rect.width
            if size > master["size"]:
                master["con_id"] = con.ipc_data['id']
                # master["name"] = con.name
                master["size"] = size

    cmd = 'swap container with con_id {}' \
        .format(str(master['con_id']))
    return cmd


async def main():
    i3 = await Connection().connect()
    tree = await i3.get_tree()
    focused = tree.find_focused()
    await i3.command(await swap_master(focused.workspace(), focused))
loop = asyncio.get_event_loop()
loop.run_until_complete(main())
loop.close()
